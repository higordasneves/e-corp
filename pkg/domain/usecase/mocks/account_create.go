// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/higordasneves/e-corp/pkg/domain/entities"
	"github.com/higordasneves/e-corp/pkg/domain/usecase"
	"sync"
)

// Ensure, that CreateAccountUCBrokerMock does implement usecase.CreateAccountUCBroker.
// If this is not the case, regenerate this file with moq.
var _ usecase.CreateAccountUCBroker = &CreateAccountUCBrokerMock{}

// CreateAccountUCBrokerMock is a mock implementation of usecase.CreateAccountUCBroker.
//
//	func TestSomethingThatUsesCreateAccountUCBroker(t *testing.T) {
//
//		// make and configure a mocked usecase.CreateAccountUCBroker
//		mockedCreateAccountUCBroker := &CreateAccountUCBrokerMock{
//			NotifyAccountCreationFunc: func(ctx context.Context, account entities.Account) error {
//				panic("mock out the NotifyAccountCreation method")
//			},
//		}
//
//		// use mockedCreateAccountUCBroker in code that requires usecase.CreateAccountUCBroker
//		// and then make assertions.
//
//	}
type CreateAccountUCBrokerMock struct {
	// NotifyAccountCreationFunc mocks the NotifyAccountCreation method.
	NotifyAccountCreationFunc func(ctx context.Context, account entities.Account) error

	// calls tracks calls to the methods.
	calls struct {
		// NotifyAccountCreation holds details about calls to the NotifyAccountCreation method.
		NotifyAccountCreation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account entities.Account
		}
	}
	lockNotifyAccountCreation sync.RWMutex
}

// NotifyAccountCreation calls NotifyAccountCreationFunc.
func (mock *CreateAccountUCBrokerMock) NotifyAccountCreation(ctx context.Context, account entities.Account) error {
	callInfo := struct {
		Ctx     context.Context
		Account entities.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockNotifyAccountCreation.Lock()
	mock.calls.NotifyAccountCreation = append(mock.calls.NotifyAccountCreation, callInfo)
	mock.lockNotifyAccountCreation.Unlock()
	if mock.NotifyAccountCreationFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.NotifyAccountCreationFunc(ctx, account)
}

// NotifyAccountCreationCalls gets all the calls that were made to NotifyAccountCreation.
// Check the length with:
//
//	len(mockedCreateAccountUCBroker.NotifyAccountCreationCalls())
func (mock *CreateAccountUCBrokerMock) NotifyAccountCreationCalls() []struct {
	Ctx     context.Context
	Account entities.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account entities.Account
	}
	mock.lockNotifyAccountCreation.RLock()
	calls = mock.calls.NotifyAccountCreation
	mock.lockNotifyAccountCreation.RUnlock()
	return calls
}
