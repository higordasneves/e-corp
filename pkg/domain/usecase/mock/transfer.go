// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ucmock

import (
	"context"
	"github.com/higordasneves/e-corp/pkg/domain/entities"
	"github.com/higordasneves/e-corp/pkg/domain/usecase"
	"sync"
)

// TransferUseCase is a mock implementation of usecase.TransferUseCase.
//
// 	func TestSomethingThatUsesTransferUseCase(t *testing.T) {
//
// 		// make and configure a mocked usecase.TransferUseCase
// 		mockedTransferUseCase := &TransferUseCase{
// 			FetchTransfersFunc: func(ctx context.Context, id string) ([]entities.Transfer, error) {
// 				panic("mock out the FetchTransfers method")
// 			},
// 			TransferFunc: func(ctx context.Context, transferInput *usecase.TransferInput) (*entities.Transfer, error) {
// 				panic("mock out the Transfer method")
// 			},
// 		}
//
// 		// use mockedTransferUseCase in code that requires usecase.TransferUseCase
// 		// and then make assertions.
//
// 	}
type TransferUseCase struct {
	// FetchTransfersFunc mocks the FetchTransfers method.
	FetchTransfersFunc func(ctx context.Context, id string) ([]entities.Transfer, error)

	// TransferFunc mocks the Transfer method.
	TransferFunc func(ctx context.Context, transferInput *usecase.TransferInput) (*entities.Transfer, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchTransfers holds details about calls to the FetchTransfers method.
		FetchTransfers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Transfer holds details about calls to the Transfer method.
		Transfer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TransferInput is the transferInput argument value.
			TransferInput *usecase.TransferInput
		}
	}
	lockFetchTransfers sync.RWMutex
	lockTransfer       sync.RWMutex
}

// FetchTransfers calls FetchTransfersFunc.
func (mock *TransferUseCase) FetchTransfers(ctx context.Context, id string) ([]entities.Transfer, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFetchTransfers.Lock()
	mock.calls.FetchTransfers = append(mock.calls.FetchTransfers, callInfo)
	mock.lockFetchTransfers.Unlock()
	if mock.FetchTransfersFunc == nil {
		var (
			transfersOut []entities.Transfer
			errOut       error
		)
		return transfersOut, errOut
	}
	return mock.FetchTransfersFunc(ctx, id)
}

// FetchTransfersCalls gets all the calls that were made to FetchTransfers.
// Check the length with:
//     len(mockedTransferUseCase.FetchTransfersCalls())
func (mock *TransferUseCase) FetchTransfersCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockFetchTransfers.RLock()
	calls = mock.calls.FetchTransfers
	mock.lockFetchTransfers.RUnlock()
	return calls
}

// Transfer calls TransferFunc.
func (mock *TransferUseCase) Transfer(ctx context.Context, transferInput *usecase.TransferInput) (*entities.Transfer, error) {
	callInfo := struct {
		Ctx           context.Context
		TransferInput *usecase.TransferInput
	}{
		Ctx:           ctx,
		TransferInput: transferInput,
	}
	mock.lockTransfer.Lock()
	mock.calls.Transfer = append(mock.calls.Transfer, callInfo)
	mock.lockTransfer.Unlock()
	if mock.TransferFunc == nil {
		var (
			transferOut *entities.Transfer
			errOut      error
		)
		return transferOut, errOut
	}
	return mock.TransferFunc(ctx, transferInput)
}

// TransferCalls gets all the calls that were made to Transfer.
// Check the length with:
//     len(mockedTransferUseCase.TransferCalls())
func (mock *TransferUseCase) TransferCalls() []struct {
	Ctx           context.Context
	TransferInput *usecase.TransferInput
} {
	var calls []struct {
		Ctx           context.Context
		TransferInput *usecase.TransferInput
	}
	mock.lockTransfer.RLock()
	calls = mock.calls.Transfer
	mock.lockTransfer.RUnlock()
	return calls
}
