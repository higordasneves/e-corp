// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ucmock

import (
	"context"
	"github.com/dgrijalva/jwt-go"
	"github.com/higordasneves/e-corp/pkg/domain/usecase"
	"sync"
)

// AuthUseCase is a mock implementation of usecase.AuthUseCase.
//
// 	func TestSomethingThatUsesAuthUseCase(t *testing.T) {
//
// 		// make and configure a mocked usecase.AuthUseCase
// 		mockedAuthUseCase := &AuthUseCase{
// 			LoginFunc: func(ctx context.Context, input *usecase.LoginInput) (*usecase.Token, error) {
// 				panic("mock out the Login method")
// 			},
// 			ValidateTokenFunc: func(tokenString string) (*jwt.StandardClaims, error) {
// 				panic("mock out the ValidateToken method")
// 			},
// 		}
//
// 		// use mockedAuthUseCase in code that requires usecase.AuthUseCase
// 		// and then make assertions.
//
// 	}
type AuthUseCase struct {
	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, input *usecase.LoginInput) (*usecase.Token, error)

	// ValidateTokenFunc mocks the ValidateToken method.
	ValidateTokenFunc func(tokenString string) (*jwt.StandardClaims, error)

	// calls tracks calls to the methods.
	calls struct {
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *usecase.LoginInput
		}
		// ValidateToken holds details about calls to the ValidateToken method.
		ValidateToken []struct {
			// TokenString is the tokenString argument value.
			TokenString string
		}
	}
	lockLogin         sync.RWMutex
	lockValidateToken sync.RWMutex
}

// Login calls LoginFunc.
func (mock *AuthUseCase) Login(ctx context.Context, input *usecase.LoginInput) (*usecase.Token, error) {
	callInfo := struct {
		Ctx   context.Context
		Input *usecase.LoginInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	if mock.LoginFunc == nil {
		var (
			tokenOut *usecase.Token
			errOut   error
		)
		return tokenOut, errOut
	}
	return mock.LoginFunc(ctx, input)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//     len(mockedAuthUseCase.LoginCalls())
func (mock *AuthUseCase) LoginCalls() []struct {
	Ctx   context.Context
	Input *usecase.LoginInput
} {
	var calls []struct {
		Ctx   context.Context
		Input *usecase.LoginInput
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// ValidateToken calls ValidateTokenFunc.
func (mock *AuthUseCase) ValidateToken(tokenString string) (*jwt.StandardClaims, error) {
	callInfo := struct {
		TokenString string
	}{
		TokenString: tokenString,
	}
	mock.lockValidateToken.Lock()
	mock.calls.ValidateToken = append(mock.calls.ValidateToken, callInfo)
	mock.lockValidateToken.Unlock()
	if mock.ValidateTokenFunc == nil {
		var (
			standardClaimsOut *jwt.StandardClaims
			errOut            error
		)
		return standardClaimsOut, errOut
	}
	return mock.ValidateTokenFunc(tokenString)
}

// ValidateTokenCalls gets all the calls that were made to ValidateToken.
// Check the length with:
//     len(mockedAuthUseCase.ValidateTokenCalls())
func (mock *AuthUseCase) ValidateTokenCalls() []struct {
	TokenString string
} {
	var calls []struct {
		TokenString string
	}
	mock.lockValidateToken.RLock()
	calls = mock.calls.ValidateToken
	mock.lockValidateToken.RUnlock()
	return calls
}
