// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfers.sql

package sqlc

import (
	"context"
	"time"

	uuid "github.com/gofrs/uuid/v5"
)

const InsertTransfer = `-- name: InsertTransfer :exec
insert into transfers(id, account_origin_id, account_destination_id, amount, created_at)
values ($1, $2, $3, $4, $5)
`

type InsertTransferParams struct {
	ID                   uuid.UUID
	AccountOriginID      uuid.UUID
	AccountDestinationID uuid.UUID
	Amount               int64
	CreatedAt            time.Time
}

func (q *Queries) InsertTransfer(ctx context.Context, arg InsertTransferParams) error {
	_, err := q.db.Exec(ctx, InsertTransfer,
		arg.ID,
		arg.AccountOriginID,
		arg.AccountDestinationID,
		arg.Amount,
		arg.CreatedAt,
	)
	return err
}

const ListAccountTransfers = `-- name: ListAccountTransfers :many
select id, account_origin_id, account_destination_id, amount, created_at, updated_at
from transfers
where account_origin_id = $1 or account_destination_id = $1
order by id desc
`

func (q *Queries) ListAccountTransfers(ctx context.Context, accountID uuid.UUID) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, ListAccountTransfers, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.AccountOriginID,
			&i.AccountDestinationID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
