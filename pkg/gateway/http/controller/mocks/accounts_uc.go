// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/higordasneves/e-corp/pkg/domain/entities"
	"github.com/higordasneves/e-corp/pkg/domain/usecase"
	"github.com/higordasneves/e-corp/pkg/domain/vos"
	"github.com/higordasneves/e-corp/pkg/gateway/http/controller"
	"sync"
)

// Ensure, that AccountUseCaseMock does implement controller.AccountUseCase.
// If this is not the case, regenerate this file with moq.
var _ controller.AccountUseCase = &AccountUseCaseMock{}

// AccountUseCaseMock is a mock implementation of controller.AccountUseCase.
//
//	func TestSomethingThatUsesAccountUseCase(t *testing.T) {
//
//		// make and configure a mocked controller.AccountUseCase
//		mockedAccountUseCase := &AccountUseCaseMock{
//			CreateAccountFunc: func(ctx context.Context, input *usecase.AccountInput) (*entities.AccountOutput, error) {
//				panic("mock out the CreateAccount method")
//			},
//			FetchAccountsFunc: func(ctx context.Context) ([]entities.AccountOutput, error) {
//				panic("mock out the FetchAccounts method")
//			},
//			GetBalanceFunc: func(ctx context.Context, id vos.UUID) (int, error) {
//				panic("mock out the GetBalance method")
//			},
//		}
//
//		// use mockedAccountUseCase in code that requires controller.AccountUseCase
//		// and then make assertions.
//
//	}
type AccountUseCaseMock struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(ctx context.Context, input *usecase.AccountInput) (*entities.AccountOutput, error)

	// FetchAccountsFunc mocks the FetchAccounts method.
	FetchAccountsFunc func(ctx context.Context) ([]entities.AccountOutput, error)

	// GetBalanceFunc mocks the GetBalance method.
	GetBalanceFunc func(ctx context.Context, id vos.UUID) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *usecase.AccountInput
		}
		// FetchAccounts holds details about calls to the FetchAccounts method.
		FetchAccounts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetBalance holds details about calls to the GetBalance method.
		GetBalance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID vos.UUID
		}
	}
	lockCreateAccount sync.RWMutex
	lockFetchAccounts sync.RWMutex
	lockGetBalance    sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *AccountUseCaseMock) CreateAccount(ctx context.Context, input *usecase.AccountInput) (*entities.AccountOutput, error) {
	callInfo := struct {
		Ctx   context.Context
		Input *usecase.AccountInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	if mock.CreateAccountFunc == nil {
		var (
			accountOutputOut *entities.AccountOutput
			errOut           error
		)
		return accountOutputOut, errOut
	}
	return mock.CreateAccountFunc(ctx, input)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//
//	len(mockedAccountUseCase.CreateAccountCalls())
func (mock *AccountUseCaseMock) CreateAccountCalls() []struct {
	Ctx   context.Context
	Input *usecase.AccountInput
} {
	var calls []struct {
		Ctx   context.Context
		Input *usecase.AccountInput
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// FetchAccounts calls FetchAccountsFunc.
func (mock *AccountUseCaseMock) FetchAccounts(ctx context.Context) ([]entities.AccountOutput, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFetchAccounts.Lock()
	mock.calls.FetchAccounts = append(mock.calls.FetchAccounts, callInfo)
	mock.lockFetchAccounts.Unlock()
	if mock.FetchAccountsFunc == nil {
		var (
			accountOutputsOut []entities.AccountOutput
			errOut            error
		)
		return accountOutputsOut, errOut
	}
	return mock.FetchAccountsFunc(ctx)
}

// FetchAccountsCalls gets all the calls that were made to FetchAccounts.
// Check the length with:
//
//	len(mockedAccountUseCase.FetchAccountsCalls())
func (mock *AccountUseCaseMock) FetchAccountsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFetchAccounts.RLock()
	calls = mock.calls.FetchAccounts
	mock.lockFetchAccounts.RUnlock()
	return calls
}

// GetBalance calls GetBalanceFunc.
func (mock *AccountUseCaseMock) GetBalance(ctx context.Context, id vos.UUID) (int, error) {
	callInfo := struct {
		Ctx context.Context
		ID  vos.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetBalance.Lock()
	mock.calls.GetBalance = append(mock.calls.GetBalance, callInfo)
	mock.lockGetBalance.Unlock()
	if mock.GetBalanceFunc == nil {
		var (
			nOut   int
			errOut error
		)
		return nOut, errOut
	}
	return mock.GetBalanceFunc(ctx, id)
}

// GetBalanceCalls gets all the calls that were made to GetBalance.
// Check the length with:
//
//	len(mockedAccountUseCase.GetBalanceCalls())
func (mock *AccountUseCaseMock) GetBalanceCalls() []struct {
	Ctx context.Context
	ID  vos.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  vos.UUID
	}
	mock.lockGetBalance.RLock()
	calls = mock.calls.GetBalance
	mock.lockGetBalance.RUnlock()
	return calls
}
