// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/higordasneves/e-corp/pkg/domain/usecase"
	"github.com/higordasneves/e-corp/pkg/gateway/http"
	"sync"
)

// Ensure, that AuthUseCaseMock does implement controller.AuthUseCase.
// If this is not the case, regenerate this file with moq.
var _ http.AuthUseCase = &AuthUseCaseMock{}

// AuthUseCaseMock is a mock implementation of controller.AuthUseCase.
//
//	func TestSomethingThatUsesAuthUseCase(t *testing.T) {
//
//		// make and configure a mocked controller.AuthUseCase
//		mockedAuthUseCase := &AuthUseCaseMock{
//			LoginFunc: func(ctx context.Context, input usecase.LoginInput) (usecase.LoginOutput, error) {
//				panic("mock out the Login method")
//			},
//		}
//
//		// use mockedAuthUseCase in code that requires controller.AuthUseCase
//		// and then make assertions.
//
//	}
type AuthUseCaseMock struct {
	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, input usecase.LoginInput) (usecase.LoginOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input usecase.LoginInput
		}
	}
	lockLogin sync.RWMutex
}

// Login calls LoginFunc.
func (mock *AuthUseCaseMock) Login(ctx context.Context, input usecase.LoginInput) (usecase.LoginOutput, error) {
	callInfo := struct {
		Ctx   context.Context
		Input usecase.LoginInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	if mock.LoginFunc == nil {
		var (
			loginOutputOut usecase.LoginOutput
			errOut         error
		)
		return loginOutputOut, errOut
	}
	return mock.LoginFunc(ctx, input)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedAuthUseCase.LoginCalls())
func (mock *AuthUseCaseMock) LoginCalls() []struct {
	Ctx   context.Context
	Input usecase.LoginInput
} {
	var calls []struct {
		Ctx   context.Context
		Input usecase.LoginInput
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}
