package middleware

import (
	"context"
	"fmt"
	"github.com/higordasneves/e-corp/pkg/gateway/controller"
	"net/http"
	"strings"

	"github.com/dgrijalva/jwt-go"
	"go.uber.org/zap"

	"github.com/higordasneves/e-corp/pkg/domain"
	"github.com/higordasneves/e-corp/utils/logger"
)

// Authenticate validates the session token provided as input.
// Tokens are generated by the Login use case and contain an expiration time.
// Returns ErrTokenInvalid if the token does not match or if the token has expired.
func Authenticate(secretKey string) func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			header := strings.Split(r.Header.Get("Authorization"), "Bearer ")
			if len(header) != 2 {
				controller.HandleError(r.Context(), w, domain.ErrUnauthorized)
				return
			}

			tokenString := header[1]
			token, err := jwt.ParseWithClaims(tokenString, &jwt.StandardClaims{}, func(token *jwt.Token) (interface{}, error) {
				if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
					return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
				}

				return []byte(secretKey), nil
			})
			if err != nil {
				controller.HandleError(r.Context(), w, domain.ErrUnauthorized)
				return
			}

			claims, ok := token.Claims.(*jwt.StandardClaims)
			if !(ok && token.Valid) {
				controller.HandleError(r.Context(), w, domain.ErrUnauthorized)
				return
			}

			ctxWithValue := context.WithValue(r.Context(), "subject", claims.Subject)

			next.ServeHTTP(w, r.WithContext(ctxWithValue))
		})
	}
}

// LoggerToContext associates a logger with the request context.
func LoggerToContext(l *zap.Logger) func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			r = r.WithContext(logger.AssociateCtx(r.Context(), l))
			next.ServeHTTP(w, r)
		})
	}
}
